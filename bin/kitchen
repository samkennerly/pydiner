#!/usr/bin/env zsh
# Build and run Python development containers.

CONTEXT="$PWD"                    # Path to build context
NAMETAG="$(basename "$CONTEXT")"  # Name of image to build
PKGFILE="requirements.txt"        # List of packages to install
WORKDIR="/context"                # Working directory inside container

help() {
  echo "Run disposable containers built from $CONTEXT"
  echo "\nCommands"
  echo "alamode         Don't make me think, just do all the things"
  echo "bake            Build $NAMETAG image from $CONTEXT"
  echo "clean           Delete $NAMETAG containers and leftovers"
  echo "debug [SCRIPT]  Run SCRIPT with interactive debugger"
  echo "eighty_six      Delete $NAMETAG image, containers, and leftovers"
  echo "freeze          Update $PKGFILE and rebuild image (if needed)"
  echo "help            Show this menu with Docker inventory"
  echo "runit [CMD]     Run CMD in an interactive $NAMETAG container"
  echo "serve [CMD]     Same as runit, but with $WORKDIR mounted from $CONTEXT"
  echo "test            Run all tests in a $NAMETAG container"
  echo "\nExamples"
  echo "cd path/to/my/project"
  echo "bin/kitchen alamode"
  echo "bin/kitchen runit"
  echo "bin/kitchen serve soda --fizz=4 0 10"
  echo "bin/kitchen debug src/pydiner/utensils.py"
  echo "\nImages" && docker image ls | sort
  echo "\nVolumes" && docker volume ls | sort
  echo "\nNetworks" && docker network ls
  echo "\nContainers" && docker ps --all
}
alamode() {
  bake && freeze && test && serve "$@"
}
bake() {
  touch "$PKGFILE" &&
  docker build --tag "$NAMETAG" --build-arg WORKDIR="$WORKDIR" "$CONTEXT" &&
  docker image prune --force
}
clean() {
  docker ps --quiet --filter ancestor="$NAMETAG" | xargs docker rm --force &&
  docker system prune "$@"
}
debug() {
  serve python -m pdb "$@"
}
eighty_six() {
  docker rmi --force "$NAMETAG" &&
  clean "$@"
}
freeze() {
  docker run --rm "$NAMETAG" pip freeze --exclude-editable > "$PKGFILE" &&
  bake
}
runit() {
  docker run --rm --interactive --tty "$NAMETAG" "$@"
}
serve() {
  docker run --rm --interactive --tty \
    --volume "${CONTEXT}:${WORKDIR}:delegated" \
    "$NAMETAG" "$@"
}
test() {
  docker run --rm "$NAMETAG" python -m unittest "$@" --verbose
}

if [ $# -eq 0 ]; then help; else "$@"; fi
