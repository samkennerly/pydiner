#!/usr/bin/env python3
"""
Print all permutations of the characters in a string.
Run with the --help option to see a help menu.

This example script tests some common tasks:

- Parse command-line arguments.
- Read default parameters from a file.
- Save outputs to a (possibly very large) file.
- Send log messages to STDOUT and errors to STDERR.

"""
from argparse import ArgumentParser
from itertools import permutations
from pathlib import Path

from pydiner import REPO, achtung, batched, echo, fullpath, getparams


OUTPUTS = REPO / "var"
PROFILES = REPO / "etc"


def argparams():
    """ dict: Parameters parsed from command-line inputs. """
    parsed = ArgumentParser()
    parsed.description = """Find all derangements of characters in WORD."""
    arg = parsed.add_argument
    arg("word", nargs="?", type=str, help="scramble this string")
    arg("-n", "--nbatch", type=int, help="maximum batch size")
    arg("-o", "--outpath", type=Path, help="save output to this file")
    arg("-p", "--profile", type=str, help="use pre-configured defaults")
    arg("-q", "--quiet", action="store_true", help="no log messages to STDOUT")
    parsed = parsed.parse_args()
    parsed = { k:v for k,v in vars(parsed).items() if v is not None }

    return parsed


def factorial(n):
    """ int: n! if n is a non-negative integer """
    return n * factorial(n - 1) if (n > 1) else 1


def main(**kwargs):
    profile = PROFILES / kwargs.pop("profile", "default")

    echo("Read parameters from ", profile)
    params = getparams(profile, **kwargs)
    outpath = OUTPUTS / params.pop("outpath")
    nbatch = params.pop("nbatch")
    quiet = params.pop("quiet")
    word = params.pop("word")

    nlines = factorial(len(word))
    megalines = nlines // 1_000_000
    if not quiet:
        echo(f"Calculate {nlines} permutations of '{word}'")
    if megalines:
        achtung(f"Expected output is {megalines} million lines")

    echo(f"Write output to {outpath}")
    perms = ("".join(x) for x in permutations(sorted(word)))
    with open(outpath, "w") as file:
        for batch in batched(perms, nbatch):
            print("\n".join(batch), file=file)


if __name__ == "__main__":
    main(**argparams())
